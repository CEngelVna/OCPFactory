<?xml version="1.0" encoding="utf-8"?>
<abapGit version="v1.0.0" serializer="LCL_OBJECT_CLAS" serializer_version="v1.0.0">
 <asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
  <asx:values>
   <VSEOCLASS>
    <CLSNAME>ZCL_OCP_FACTORY</CLSNAME>
    <LANGU>E</LANGU>
    <DESCRIPT>Open/Closed Factory</DESCRIPT>
    <STATE>1</STATE>
    <CLSCCINCL>X</CLSCCINCL>
    <FIXPT>X</FIXPT>
    <UNICODE>X</UNICODE>
   </VSEOCLASS>
   <TPOOL>
    <item>
     <ID>I</ID>
     <KEY>001</KEY>
     <ENTRY>Interface</ENTRY>
     <LENGTH>19</LENGTH>
    </item>
    <item>
     <ID>I</ID>
     <KEY>002</KEY>
     <ENTRY>needs a Default Class</ENTRY>
     <LENGTH>42</LENGTH>
    </item>
    <item>
     <ID>I</ID>
     <KEY>003</KEY>
     <ENTRY>does not implement ZIF_CREATED_VIA_OCP_FACTORY</ENTRY>
     <LENGTH>92</LENGTH>
    </item>
    <item>
     <ID>I</ID>
     <KEY>004</KEY>
     <ENTRY>An Interface Reference Object is passed in</ENTRY>
     <LENGTH>84</LENGTH>
    </item>
   </TPOOL>
   <LINES>
    <TLINE>
     <TDFORMAT>U1</TDFORMAT>
     <TDLINE>&amp;FUNCTIONALITY&amp;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>Follow this link for a description of the &quot;Open-Closed Principle&quot;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>https://en.wikipedia.org/wiki/Open-closed_principle</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>In essence the idea is somewhat like Black Magic - you can change the</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>behaviour of a program without actually changing the program itself.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>That sounds impossible - ridiculous even - but in fact there are many</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>ways to do this. The mechanism you will be most familiar with would be</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>user exits inside standard SAP programs, and the IMG to alter standard</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>program behaviour via customising.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>If it&apos;s good enough for SAP it is good enough for me; so this factory</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>class is designed in a way such that you pass in what you expect the</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>concrete class you desire to be capable of and the most appropriate</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>class that implements the interface is passed back.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>U1</TDFORMAT>
     <TDLINE>&amp;EXAMPLE&amp;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>That sounds a bit obscure so let us have a real life example. You have a</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>main class - be it a model class, view class, whatever - that needs to</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>behave slightly differently for different countries and/or business</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>lines and you have new countries and/or business lines coming on stream</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>like there is no tomorrow.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>What you do is pepper that class with &quot;exit&quot; methods which can then be</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>redefined in country and/or business line specific subclasses.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>Then when - say - Hong Kong comes online you can just add a new Hong</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>Kong specific subclass and the main program will automatically pick that</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>subclass when a Hong Kong users tries to run the transaction -without</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>having to change the main program at all.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>Moreover using this mechanism the new Hong Kong specific logic cannot</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>possibly break the logic for any other country on the grounds it is</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>never called for those countries.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>U1</TDFORMAT>
     <TDLINE>&amp;PROCEDURE&amp;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>The class you desire to create has to implement the</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>ZIF_CREATED_VIA_OCP_FACTORY interface. The &quot;context&quot; data e.g. country,</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>business line or anything at all, is passed into method</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>IS_THE_RIGHT_CLASS_TYPE_GIVEN and the subclass which is the best match</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>for the requirements is passed back.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>U1</TDFORMAT>
     <TDLINE>&amp;DEPENDENCIES&amp;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>This package has a dependency on the package at the GitHub URL</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>https://github.com/hardyp/DesignByContract</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>Hopefully as this package has a marker interface APACK will sort this</TDLINE>
    </TLINE>
    <TLINE>
     <TDLINE>out for you automatically.</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>U1</TDFORMAT>
     <TDLINE>&amp;FURTHER_SOURCES_OF_INF&amp;</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>Please read this blog:-</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
     <TDLINE>https://blogs.sap.com/2017/04/17/charlie-and-the-chocolate-factory-patte</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>=</TDFORMAT>
     <TDLINE>rn/</TDLINE>
    </TLINE>
    <TLINE>
     <TDFORMAT>AS</TDFORMAT>
    </TLINE>
   </LINES>
   <DESCRIPTIONS>
    <SEOCOMPOTX>
     <CLSNAME>ZCL_OCP_FACTORY</CLSNAME>
     <CMPNAME>LIST_OF_IMPLEMENTING_CLASSES</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Given Interface, Return List of Implementing Classes</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CLSNAME>ZCL_OCP_FACTORY</CLSNAME>
     <CMPNAME>RETURN_OBJECT_GIVEN</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Given Context Data, Return Appropriate Concrete Instance</DESCRIPT>
    </SEOCOMPOTX>
   </DESCRIPTIONS>
  </asx:values>
 </asx:abap>
</abapGit>
